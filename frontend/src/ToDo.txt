(DONE - 11 DEC 2023) 1. Create 'Context' for 'Products' data

(DONE - 4 DEC 2023) 2. Create a new page and new navigation for "Order List" (just like Product List page)

(DONE - 11 DEC 2023) 3. Migrate from JSON to MongoDB

(DONE - 23 DEC 2023)
( Create New model, route, controller - for PROJECT collection )
~ Create model (DONE)
~ Create route (DONE)
~ Create controller (DONE)
~ Create project route handler in server.js (DONE)
~ Insert documents for TRIO, SCAPE, MEL05 (DONE)

(DONE - 23 DEC 2023)
***(New Product)
~ Create controlled input for "Supplier_Name" by adding a list of <option> (DONE)

~ Create controlled input for "UOM" by adding a list of <option> (DONE)

~ Create controlled input for "Installation Category" by adding a list of <option> (DONE)

~ Create user input validation for "Rate Ex GST", where string type input is not allowed. (DONE)

(DONE - 24 DEC 2023)
***(New Order)
~ In 'New Order', display dynamic value of "UOM" instead of label "UOM:". Ex: Box(1000): [   ] (DONE)

~ Create a new dropdown entry for 'Project name' using fetch request to PROJECT and get 'Project_ID' (DONE)

~ Once order is submitted, it should bring user to 'Purchase Order' page (DONE)

~ Fix duplicate validation during Form Submission (DONE)

~ Create a new dropdown entry for 'Supplier_Name' using fetch request to PRODUCT and get 'Supplier_Name' (DONE)
    - Once Supplier_Name is selected, it automatically filters the 'Product_Name' options - using .filter() + .map() (DONE)

***(Housekeeping)
(DONE 26DEC2023)
~ Fix context issue - Refer to YouTube: MERN Stack - Context 
(DONE 27DEC2023)
~ Improve Order_No as it's currently using complex id generated by MongoDB


(DONE 31DEC2023)
***(New Product, ProductList, PRODUCT model)
~ Create a new column called 'Type'.
~ In (New Order), user can filter 'Type' so it's more convenient for them to select product_name in <options> - using .filter() + map()
~ Also added Cart.js component and changed the design of Adding Products.

(DONE)
***(Purchase Order - OrderList)
~ I want to be able to edit Order Details (PATCH request to orderdb.json)
    - FIRSTLY, we need to make a decision whether if we can edit Order Details once it's submitted
    - If can edit,
        - we need to create a view to show 'before edit' and 'after edit'
~ We also want to delete Order Details (DELETE request to orderdb.json)


-------------NEW YEAR 2024---------------


(DONE 29JAN2024)
- change 'Other' to 'Others'
- edited Installation_Category items
- removed United Equipment
- switched hard-coded supplier list to using .map()
- switched hard-coded Product_UOM to using .map and .filter()

(DONE 1FEB2024)
1. When Update Order page is rendered, we will save a copy of the data. User will make changes to the order, user will need to add comment for changes.
- In Purchase Order details, there will be a section that shows recent changes.
a. Create a new entry for Order model, add 'Update reason' and 'Comment' (done)
a. Create a order-history database (done)
b. In Order Details page, When user clicks update button, the system will navigate to Update Order form.(done)
c. System will hide Update button if no changes is made to the form, there will also be a 'Cancel Update' button to return to previous page. (done)
d. If user clicks 'Cancel Update', we will return to Order Details page. (done)
e. If user make changes to order details, update button will show, and if user clicks update, user must input update reason and comment. (done)
f. Once reason input is confirmed, the system will create order-history using (POST request). The system will update(PATCH REQUEST) existing order details. (done)





2. In Order Details page, we want to display order-history.
a. we want to check if this existing order has previously been updated. To check, we use property 'createdAt' === 'updatedAt'. If same, we display 'This order has not been revised'.
If not same, meaning the order has previously been updated, then we display 'This order has previously been revised by who who on what what date', and we also display a button to show order history.
b. By pulling data from order-history database, we will map all order history based on 'Order_ID', NOT '_id'.

3. In Purchase Order page, we want to display order status.
- User needs to go into Purchase Order details to change order status. They don't need to go into update order page to change the status.

4. Fix filtering system (checkboxes)

5. Add a new dropdown item for UOM called 'custom' and allow user to add custom UOM

6. All Products (Home) should have a filter by Supplier or by Installation Category

7. Change Navbar items

8. Add Search Bar




Other features:
(New Product Form and Product Details page)
~ Allow user to add picture when adding new Product.
~ User can also update product by inserting product image.

***(New form NewProject, new page ProjectList)
~ Create a new page for ProjectList, a new page for NewProject form
~ Create admin authentication to access this page

***(Additional Feature: Lumen * Length calculator)
~ When user selects 'Lumen' as UOM, input textbox 'Length' will pop up for input. It calculates how much each STUD cost.
